name: Ridge generator

on:
  workflow_dispatch:
    inputs:
      SRC_URL:
        description: "URL(s) to download source DEM (comma separated)"
        required: true
        default: ""
      DST_EXT:
        description: "Destination file extension/format"
        required: false
        default: ".kmz"
      TOOL_OPTIONS:
        description: "Extra tool options (like -valley)"
        required: false
        default: ""
      GDALWARP_OPTIONS:
        description: "Modify the source via gdalwarp, like (-ts <w> <h>, -te <xmin> <ymin> <xmax> <ymax>)"
        required: false
        default: ""
      REBUILD_CACHE:
        description: "Force rebuild of cached GDAL wheel package"
        required: false
        default: "false"

env:
  SRC_URL: "${{ github.event.inputs.SRC_URL }}"
  DST_EXT: "${{ github.event.inputs.DST_EXT }}"
  TOOL_OPTIONS: "${{ github.event.inputs.TOOL_OPTIONS }}"
  GDALWARP_OPTIONS: "${{ github.event.inputs.GDALWARP_OPTIONS }}"

jobs:
  generate:
    runs-on: windows-latest

    env:
      SRC_DEM_DIR: "DEM"
      MOD_SRC_POSTFIX: "-mod.tif"
      MERGE_SRC_POSTFIX: "-merge.tif"
      MERGE_OPTIONS: "-a_nodata -32768"
      DEM_EXTENSIONS: ".dem, .hgt, .tif, .tiff"

    defaults:
      run:
        shell: pwsh

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Set up GDAL
      uses: trundev/setup-gdal@main
      id: setup-gdal
      with:
        rebuild-cache: ${{ github.event.inputs.REBUILD_CACHE }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Install module and dependencies
      run: python -m pip install --upgrade pip .

    - name: Initial job summary
      run: |
        "### Inputs
        - SRC_URL: ${{ env.SRC_URL }}
        - DST_EXT: ${{ env.DST_EXT }}
        - TOOL_OPTIONS: ${{ env.TOOL_OPTIONS }}
        - GDALWARP_OPTIONS: ${{ env.GDALWARP_OPTIONS }}
        - REBUILD_CACHE: ${{ github.event.inputs.REBUILD_CACHE }}
        " >> $env:GITHUB_STEP_SUMMARY

        "<details><summary>Installed packages</summary>

          | Package  | Version |
          |----------|---------|
        $(pip freeze | ForEach-Object {
          "  | $($_ -replace '==', ' | ' -replace ' @ ', ' | ') |"} |
          Join-String -Separator "`n")
        </details>
        " >> $env:GITHUB_STEP_SUMMARY

    - name: Download source DEMs
      id: download-dem
      uses: ./.github/download-data
      with:
        source-urls: ${{ env.SRC_URL }}
        unpack-sources: true
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        UNPACK_DIR: ${{ env.SRC_DEM_DIR }}
        UNPACK_EXTENSIONS: ${{ env.DEM_EXTENSIONS }}

    - name: Set environment for ${{ steps.download-dem.outputs.source-names }}
      run: |
        $SRC_DEM = "${{ steps.download-dem.outputs.download-paths }}"
        echo "SRC_DEM=$SRC_DEM" >> ${env:GITHUB_ENV}
        echo "SRC_DEM set to $SRC_DEM"

    - name: Merge source DEMs (if multiple)
      if: contains( env.SRC_DEM, ',')
      run: |
        $SRC_DEM = "${{ env.SRC_DEM }}".Split(",").Trim()
        $MOD_SRC = Get-Item $SRC_DEM[0]
        $MOD_SRC = Join-path $MOD_SRC.Directory ($MOD_SRC.BaseName + "${{ env.MERGE_SRC_POSTFIX }}")
        echo "gdal_merge.py ${{ env.MERGE_OPTIONS }} $SRC_DEM -o $MOD_SRC"
        python -m osgeo_utils.gdal_merge ${{ env.MERGE_OPTIONS }} $SRC_DEM -o $MOD_SRC
        if ($LASTEXITCODE) {exit $LASTEXITCODE}

        $MOD_SRC = Get-Item $MOD_SRC
        echo "SRC_DEM=$MOD_SRC" >> ${env:GITHUB_ENV}
        echo "SRC_DEM changed to $MOD_SRC"

    - name: Modify/crop source DEM
      if: env.GDALWARP_OPTIONS
      run: |
        $MOD_SRC = Get-Item ${{ env.SRC_DEM }}
        $MOD_SRC = Join-path $MOD_SRC.Directory ($MOD_SRC.BaseName + "${{ env.MOD_SRC_POSTFIX }}")
        echo "gdalwarp ${{ env.GDALWARP_OPTIONS }} ${{ env.SRC_DEM }} $MOD_SRC"
        ${{ steps.setup-gdal.outputs.utils-path }}/apps/gdalwarp ${{ env.GDALWARP_OPTIONS }} ${{ env.SRC_DEM }} $MOD_SRC
        if ($LASTEXITCODE) {exit $LASTEXITCODE}

        $MOD_SRC = Get-Item $MOD_SRC
        echo "SRC_DEM=$MOD_SRC" >> ${env:GITHUB_ENV}
        echo "SRC_DEM changed to $MOD_SRC"

    - name: Select DST_NAME, get source DEM info
      run: |
        $SRC_DEM = Get-Item ${{ env.SRC_DEM }}
        $DST_NAME = $SRC_DEM.Name + "${{ env.DST_EXT }}"
        echo "DST_NAME=$DST_NAME" >> ${env:GITHUB_ENV}
        echo "DST_NAME set to $DST_NAME"

        "<details><summary>${{ env.SRC_DEM }}</summary>

        " + '```' >> $env:GITHUB_STEP_SUMMARY
        python -m osgeo_utils.samples.gdalinfo ${{ env.SRC_DEM }} >> $env:GITHUB_STEP_SUMMARY
        '```
        </details>
        ' >> $env:GITHUB_STEP_SUMMARY

    - name: Generate ridges
      run: python terrain_ridges/ridges.py ${{ env.TOOL_OPTIONS }} ${{ env.SRC_DEM }} ${{ env.DST_NAME }}

    - uses: actions/upload-artifact@v4
      id: artifact-upload
      with:
        name: ${{ env.DST_NAME }}
        path: |
          ${{ env.DST_NAME }}
          ${{ env.SRC_DEM_DIR }}/*.npy

    - name: Update job summary
      run: |
        "### Result
        - artifact-url: ${{ steps.artifact-upload.outputs.artifact-url }}" >> $env:GITHUB_STEP_SUMMARY

        $artifact = Invoke-WebRequest "${{ github.api_url }}/repos/${{ github.repository }}/actions/artifacts/${{ steps.artifact-upload.outputs.artifact-id }}"
        $artifact = ConvertFrom-Json $artifact.Content
        "- archive_download_url: $($artifact.archive_download_url)
        " >> $env:GITHUB_STEP_SUMMARY

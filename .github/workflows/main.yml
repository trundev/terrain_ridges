name: Validate ridge generator

on:
  workflow_dispatch:
    inputs:
      SRC_URL:
        description: "URL(s) to download source DEM (comma separated)"
        required: true
        default: ""
      DST_EXT:
        description: "Destination file extension/format"
        required: false
        default: ".kmz"
      TOOL_OPTIONS:
        description: "Extra tool options (like -valley)"
        required: false
        default: ""
      GDALWARP_OPTIONS:
        description: "Modify the source via gdalwarp, like (-ts <w> <h>, -te <xmin> <ymin> <xmax> <ymax>)"
        required: false
        default: ""
  push:
    branches: [ master, '**-test' ]
  pull_request:

env:
  SRC_URL: "${{ github.event.inputs.SRC_URL }}"
  DST_EXT: "${{ github.event.inputs.DST_EXT }}"
  TOOL_OPTIONS: "${{ github.event.inputs.TOOL_OPTIONS }}"
  GDALWARP_OPTIONS: "${{ github.event.inputs.GDALWARP_OPTIONS }}"
  DEF_SRC_URL: "https://www.iea-software.com/ftp/Emeraldv6/Geography/Eurasia/Elevations/SRTM3/N39E021.hgt.zip"
  DEF_DST_EXT: ".kml"
  DEF_GDALWARP_OPTIONS: ""  # Complete HGT-file (1201x1201)
  # GIS SDK release package from https://www.gisinternals.com/sdk.php
  GIS_SDK_URL: "https://download.gisinternals.com/sdk/downloads/release-1928-x64-dev.zip"
  GDAL_SRC_REF: "v3.3.2"

jobs:
  generate:
    runs-on: windows-latest

    env:
      SRC_DEM_DIR: "DEM"
      MOD_SRC_POSTFIX: "-mod.tif"
      MERGE_SRC_POSTFIX: "-merge.tif"
      MERGE_OPTIONS: "-a_nodata -32768"
      REF_RESULT_DIR: "ref_results"
      DEM_EXTENSIONS: '".dem",".hgt",".tif",".tiff"'

    steps:
    - name: Default source DEM (on push/pull_request event)
      if: env.SRC_URL == ''
      run: |
        echo "SRC_URL=${{ env.DEF_SRC_URL }}" >> ${env:GITHUB_ENV}
        echo "DST_EXT=${{ env.DEF_DST_EXT }}" >> ${env:GITHUB_ENV}
        echo "GDALWARP_OPTIONS=${{ env.DEF_GDALWARP_OPTIONS }}" >> ${env:GITHUB_ENV}

    - uses: actions/checkout@v2

    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Get pip cache dir
      id: pip-cache-dir
      run: |
        echo "::set-output name=dir::$(pip cache dir)"

    - name: Pip cache
      id: pip-cache
      uses: actions/cache@v2
      with:
        path: |
          ${{ steps.pip-cache-dir.outputs.dir }}
          GDAL
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}-${{ env.GIS_SDK_URL }}

    - name: Clone GDAL sources
      if: steps.pip-cache.outputs.cache-hit != 'true'
      uses: actions/checkout@v2
      with:
        repository: osgeo/gdal
        ref: ${{ env.GDAL_SRC_REF }}
        path: GDAL

    - name: Download GIS SDK release
      if: steps.pip-cache.outputs.cache-hit != 'true'
      run: |
        $SRC_URI = [uri]("${{ env.GIS_SDK_URL }}")
        $SRC_ZIP = $SRC_URI.Segments[-1]
        echo "Downloading from $SRC_URI..."
        Invoke-WebRequest -H @{Accept='application/octet-stream'} $SRC_URI -o $SRC_ZIP
        if ($proc.ExitCode) {exit $proc.ExitCode}
        Expand-Archive $SRC_ZIP -DestinationPath GDAL

    - name: Prepare for GDAL installation
      run: |
        $GDAL_BASE=Get-Item("GDAL")
        $SDK_BASE=Get-Item $(Join-Path $GDAL_BASE "release-*")

        $INCLUDE="$GDAL_BASE/gdal/gcore;$GDAL_BASE/gdal/gnm;$SDK_BASE/include"
        echo "INCLUDE=$INCLUDE" >> ${env:GITHUB_ENV}
        echo "INCLUDE set to $INCLUDE"

        $LIB="$SDK_BASE/lib"
        echo "LIB=$LIB" >> ${env:GITHUB_ENV}
        echo "LIB set to $LIB"

        $GDAL_DRIVER_PATH="$SDK_BASE/bin/gdal/plugins"
        echo "GDAL_DRIVER_PATH=$GDAL_DRIVER_PATH" >> ${env:GITHUB_ENV}
        echo "GDAL_DRIVER_PATH set to $GDAL_DRIVER_PATH"

        $PROJ_LIB="$SDK_BASE/bin/proj7/share"
        echo "PROJ_LIB=$PROJ_LIB" >> ${env:GITHUB_ENV}
        echo "PROJ_LIB set to $PROJ_LIB"

        # Confusing ERROR messages workaround:
        # Move plugin DLLs that can't be loaded to "plugins-optional"
        Move-Item -EA SilentlyContinue $GDAL_DRIVER_PATH/gdal_GEOR.dll,$GDAL_DRIVER_PATH/ogr_OCI.dll $GDAL_DRIVER_PATH-optional

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if (Test-Path requirements.txt) {
          pip install -r requirements.txt
        } else {
          pip install numpy gdal pyproj
        }
        if ($LASTEXITCODE) {exit $LASTEXITCODE}

        # GDAL and Python 3.8 problem:
        # With USE_PATH_FOR_GDAL_PYTHON and python 3.8, "osgeo\__init__.py" pass all directories
        # from PATH to os.add_dll_directory(), which fails if any of them is missing.
        # Fix:
        # Copy all GDAL DLLs to the 'osgeo' location (it is under python's 'lib/site-packages')
        $OSGEO_DIR=$(python -c "from importlib import util; print(util.find_spec('osgeo').submodule_search_locations[0])")
        echo "Copy all GDAL DLLs to $OSGEO_DIR (avoid USE_PATH_FOR_GDAL_PYTHON)"
        copy "${{ env.GDAL_DRIVER_PATH }}/../../*.dll" "$OSGEO_DIR"

        echo "$OSGEO_DIR" >> ${env:GITHUB_PATH}
        echo "Path added: $OSGEO_DIR"

    - name: Download source DEM
      run: |
        ForEach ($url in "${{ env.SRC_URL }}".Split(",")) {
          echo "Downloading DEM from $url..."
          $SRC_URI = [uri]"$url"
          $SRC_ZIP = $SRC_URI.Segments[-1]
          Invoke-WebRequest -H @{Accept='application/octet-stream,application/x-zip-compressed'} $SRC_URI -o $SRC_ZIP
          if ($proc.ExitCode) {exit $proc.ExitCode}
          echo "Unzipping $SRC_ZIP..."
          Expand-Archive $SRC_ZIP -DestinationPath ${{ env.SRC_DEM_DIR }}
          if ($proc.ExitCode) {exit $proc.ExitCode}
        }

        $SRC_DEM = @(Get-ChildItem ${{ env.SRC_DEM_DIR }})
        # Select just the DEM-files, if multiple files were extracted
        if ($SRC_DEM.Length -gt 1) {
          $SRC_DEM = @($SRC_DEM | Where-Object {$_.Extension -in ${{ env.DEM_EXTENSIONS }} })
          $SRC_DEM = $SRC_DEM -join ", "
        }
        echo "SRC_DEM=$SRC_DEM" >> ${env:GITHUB_ENV}
        echo "SRC_DEM set to $SRC_DEM"

    - name: Merge source DEMs (if mutiple)
      if: contains( env.SRC_DEM, ', ')
      run: |
        $SRC_DEM = "${{ env.SRC_DEM }}".Split(",").Trim()
        $MOD_SRC = Get-Item $SRC_DEM[0]
        $MOD_SRC = Join-path $MOD_SRC.Directory ($MOD_SRC.BaseName + "${{ env.MERGE_SRC_POSTFIX }}")
        echo "gdal_merge.py ${{ env.MERGE_OPTIONS }} $SRC_DEM -o $MOD_SRC"
        python $(where.exe gdal_merge.py) ${{ env.MERGE_OPTIONS }} $SRC_DEM -o $MOD_SRC
        if ($LASTEXITCODE) {exit $LASTEXITCODE}

        $MOD_SRC = Get-Item $MOD_SRC
        echo "SRC_DEM=$MOD_SRC" >> ${env:GITHUB_ENV}
        echo "SRC_DEM changed to $MOD_SRC"

    - name: Modify/crop source DEM
      if: env.GDALWARP_OPTIONS
      run: |
        $MOD_SRC = Get-Item ${{ env.SRC_DEM }}
        $MOD_SRC = Join-path $MOD_SRC.Directory ($MOD_SRC.BaseName + "${{ env.MOD_SRC_POSTFIX }}")
        echo "gdalwarp ${{ env.GDALWARP_OPTIONS }} ${{ env.SRC_DEM }} $MOD_SRC"
        ${{ env.GDAL_DRIVER_PATH }}/../apps/gdalwarp ${{ env.GDALWARP_OPTIONS }} ${{ env.SRC_DEM }} $MOD_SRC
        if ($LASTEXITCODE) {exit $LASTEXITCODE}

        $MOD_SRC = Get-Item $MOD_SRC
        echo "SRC_DEM=$MOD_SRC" >> ${env:GITHUB_ENV}
        echo "SRC_DEM changed to $MOD_SRC"

    - name: Select DST_NAME, get source DEM info
      run: |
        $SRC_DEM = Get-Item ${{ env.SRC_DEM }}
        $DST_NAME = $SRC_DEM.Name + "${{ env.DST_EXT }}"
        echo "DST_NAME=$DST_NAME" >> ${env:GITHUB_ENV}
        echo "DST_NAME set to $DST_NAME"

        $REF_NAME = Join-Path ${{ env.REF_RESULT_DIR }} $DST_NAME
        if ( Test-Path $REF_NAME) {
          echo "REF_NAME=$REF_NAME" >> ${env:GITHUB_ENV}
          echo "REF_NAME set to $REF_NAME"
        }

        ${{ env.GDAL_DRIVER_PATH }}/../apps/gdalinfo ${{ env.SRC_DEM }}

    - name: Generate ridges
      run: python ridges.py ${{ env.TOOL_OPTIONS }} ${{ env.SRC_DEM }} ${{ env.DST_NAME }}

    - uses: actions/upload-artifact@v2
      with:
        name: ${{ env.DST_NAME }}
        path: |
          ${{ env.DST_NAME }}
          ${{ env.SRC_DEM_DIR }}/*.npy

    - name: Validate result
      if: env.REF_NAME
      run: git diff --no-index ${{ env.DST_NAME }} ${{ env.REF_NAME }}

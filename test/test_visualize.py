"""Visualization for test data, generated by ./conftest.py fixtures (not actual tests)

"""
import numpy as np
import numpy.typing as npt
import pytest
from . import conftest  # Imported by pytest anyway
from terrain_ridges import build_full_graph, topo_graph
# plotly is NOT mandatory for pytest-s
try:
    import plotly.graph_objects as go
    from tools import visualize_plotly
except ModuleNotFoundError as ex:
    pytest.skip(str(ex), allow_module_level=True)


# Skip the whole module with "not visualize" marker (default)
pytestmark = pytest.mark.visualize

@pytest.fixture
def plotly_fig():
    """Plotly fixture, skip if not installed"""
    fig = go.Figure()
    yield fig
    if fig.data:
        fig.update_layout(showlegend=True)
        fig.show()

# Slice axis to project 3D grids in 2D plane
SLICE_AXIS = 0      #TODO: Change this
SLICE_LABEL = 'xyz'[SLICE_AXIS]

@pytest.fixture(autouse=True)
def numpy_printoptions():
    """Setup numpy print-options fixture"""
    np.set_printoptions(linewidth=200)

#
# Altitude visualization
#
def test_altitude_grid(plotly_fig: go.Figure, altitude_grid):
    """Visualize various altitude grids (not actual test)"""
    visualize_plotly.node_vals_to_trace(plotly_fig, altitude_grid, shape_dims=None)

def test_build_full_graph(plotly_fig: go.Figure, altitude_grid):
    """Visualize initial graph (not actual test)"""
    graph_edges, lexsort_keys = build_full_graph.build_graph_edges(altitude_grid)
    visualize_plotly.graph_to_trace(plotly_fig, graph_edges, altitude_grid)
    plotly_fig.update_layout(title_text=
            f'Main edges - edges: {graph_edges.shape[2:]}, grid: {altitude_grid.shape}')

def test_filter_treegraph(plotly_fig: go.Figure, altitude_grid):
    """Visualize filtered tree-graph from the initial edge list"""
    graph_edges, _ = build_full_graph.build_graph_edges(altitude_grid)

    edge_list, edge_mask = topo_graph.filter_treegraph(graph_edges)
    visualize_plotly.graph_to_trace(plotly_fig, graph_edges, altitude_grid, edge_mask=edge_mask)
    visualize_plotly.graph_to_trace(plotly_fig, graph_edges, altitude_grid,
                                    edge_mask=~edge_mask, name='Filtered edges')
    plotly_fig.update_layout(title_text=
            f'Tree-graph - edges: {edge_list.shape[2:]} / {graph_edges.shape[2:]}, grid: {altitude_grid.shape}')

def test_isolate_subgraphs(plotly_fig: go.Figure, altitude_grid):
    """Visualize isolated sub-graphs from tree-graphs"""
    graph_edges, _ = build_full_graph.build_graph_edges(altitude_grid)
    # Reduce edges by making it tree-graph
    edge_list, edge_mask = topo_graph.filter_treegraph(graph_edges)

    parent_id = topo_graph.isolate_subgraphs(edge_list)
    # Separate traces for each parent ID (sub-graph)
    for pid in np.unique(parent_id):
        mask = edge_mask.copy()
        mask[mask] = (parent_id == pid)[*edge_list].any(0)
        visualize_plotly.graph_to_trace(plotly_fig, graph_edges, altitude_grid,
                                        edge_mask=mask, name=f'sub-graph: {pid}')
    # Unique edges between sub-graphs
    ghost_mask = ~edge_mask
    par_edges = parent_id[*graph_edges[..., ghost_mask]]
    # Drop sub-graph inner edges (same source and target-node)
    mask = par_edges[0] != par_edges[1]
    par_edges = par_edges[:, mask]
    ghost_mask[ghost_mask] = mask
    # Drop duplicated sub-graph edges (sort to detect both directions)
    ghost_mask[ghost_mask] = topo_graph.unique_mask(np.sort(par_edges, axis=0), axis=1)

    visualize_plotly.graph_to_trace(plotly_fig, graph_edges, altitude_grid,
                                    edge_mask=ghost_mask, name='Ghost edges')
    plotly_fig.update_layout(title_text=
            f'Sub-graphs - edges: {edge_list.shape[2:]}, ghost edges: {ghost_mask.sum()},'
            f' grid: {altitude_grid.shape}')

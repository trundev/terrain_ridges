"""Visualization for test data, generated by ./conftest.py fixtures (not actual tests)

"""
import os
import numpy as np
import pytest
from . import conftest  # Imported by pytest anyway
from terrain_ridges.topo_graph import T_Graph, T_NodeValues
from terrain_ridges import build_full_graph, topo_graph
# plotly is NOT mandatory for pytest-s
try:
    import plotly.graph_objects as go
    from tools import visualize_plotly
except ModuleNotFoundError as ex:
    pytest.skip(str(ex), allow_module_level=True)


# Skip the whole module with "not visualize" marker (default)
pytestmark = pytest.mark.visualize

DEF_MAP_LAYERS = []
# Tiles from Open Topo Map (https://opentopomap.org/)
DEF_MAP_LAYERS.append({
            'name': 'Open Topo Map',
            'below': 'traces',
            'sourcetype': "raster",
            'sourceattribution': '© OpenTopoMap (CC-BY-SA)',
            'source': ['https://tile.opentopomap.org/{z}/{x}/{y}.png'],
            'minzoom': 7,
            'visible': False,
        })
# Tiles from mapy.cz (https://mapy.cz/)
DEF_MAP_LAYERS.append({
            'name': 'mapy.cz',
            'below': 'traces',
            'sourcetype': "raster",
            'sourceattribution': '©Seznam.cz a.s., 2025 and more',
            'source': ['https://windytiles.mapy.cz/turist-m/{z}-{x}-{y}.png'],
            'minzoom': 3,
            'visible': True,
        })
DEF_MAP_STYLE = 'satellite' # satellite-streets
DEF_MAP_STYLE = 'open-street-map'   # No contours

@pytest.fixture
def plotly_fig():
    """Plotly fixture, skip if not installed"""
    fig = go.Figure()
    yield fig
    if fig.data:
        fig.update_layout(showlegend=True,
                          map=dict(layers=DEF_MAP_LAYERS, style=DEF_MAP_STYLE))
        fig.show()

# Slice axis to project 3D grids in 2D plane
SLICE_AXIS = 0      #TODO: Change this
SLICE_LABEL = 'xyz'[SLICE_AXIS]

@pytest.fixture(autouse=True)
def numpy_printoptions():
    """Setup numpy print-options fixture"""
    np.set_printoptions(linewidth=200)

#
# Altitude visualization
#
def test_altitude_grid(plotly_fig: go.Figure, altitude_grid: T_NodeValues):
    """Visualize various altitude grids (not actual test)"""
    visualize_plotly.node_vals_to_trace(plotly_fig, altitude_grid, shape_dims=None)

def test_build_full_graph(plotly_fig: go.Figure, altitude_grid: T_NodeValues):
    """Visualize initial graph (not actual test)"""
    graph_edges, lexsort_keys = build_full_graph.build_graph_edges(altitude_grid)
    visualize_plotly.graph_to_trace(plotly_fig, graph_edges, altitude_grid)
    plotly_fig.update_layout(title_text=
            f'Main edges - edges: {graph_edges.shape[2:]}, grid: {altitude_grid.shape}')

def test_filter_treegraph(plotly_fig: go.Figure, altitude_grid: T_NodeValues):
    """Visualize filtered tree-graph from the initial edge list"""
    graph_edges, _ = build_full_graph.build_graph_edges(altitude_grid)

    edge_mask = topo_graph.filter_treegraph(graph_edges)
    visualize_plotly.graph_to_trace(plotly_fig, graph_edges, altitude_grid, edge_mask=edge_mask)
    visualize_plotly.graph_to_trace(plotly_fig, graph_edges, altitude_grid,
                                    edge_mask=~edge_mask, name='Filtered edges')
    plotly_fig.update_layout(title_text=
            f'Tree-graph - edges: {edge_mask.sum()} / {graph_edges.shape[2:]},'
            f' grid: {altitude_grid.shape}')

def test_isolate_subgraphs(plotly_fig: go.Figure, altitude_grid: T_NodeValues):
    """Visualize isolated sub-graphs from tree-graphs"""
    graph_edges, _ = build_full_graph.build_graph_edges(altitude_grid)
    # Reduce edges by making it tree-graph
    edge_mask = topo_graph.filter_treegraph(graph_edges)
    edge_list = graph_edges[..., edge_mask]

    parent_id = topo_graph.isolate_subgraphs(edge_list)
    # Separate traces for each parent ID (sub-graph)
    for pid in np.unique(parent_id):
        mask = edge_mask.copy()
        mask[mask] = (parent_id == pid)[*edge_list].any(0)
        visualize_plotly.graph_to_trace(plotly_fig, graph_edges, altitude_grid,
                                        edge_mask=mask, name=f'sub-graph: {pid}')
    # Unique edges between sub-graphs
    ghost_mask = ~edge_mask
    par_edges = parent_id[*graph_edges[..., ghost_mask]]
    # Drop sub-graph inner edges (same source and target-node)
    mask = par_edges[0] != par_edges[1]
    par_edges = par_edges[:, mask]
    ghost_mask[ghost_mask] = mask
    # Drop duplicated sub-graph edges (sort to detect both directions)
    ghost_mask[ghost_mask] = topo_graph.unique_mask(np.sort(par_edges, axis=0), axis=1)

    visualize_plotly.graph_to_trace(plotly_fig, graph_edges, altitude_grid,
                                    edge_mask=ghost_mask, name='Ghost edges')
    plotly_fig.update_layout(title_text=
            f'Sub-graphs - edges: {edge_mask.sum()}, ghost edges: {ghost_mask.sum()},'
            f' grid: {altitude_grid.shape}')

#
# Visualize test_legacy intermediate structures
#
from .test_legacy import merge_treegraph

def test_legacy(plotly_fig: go.Figure, tree_graph: T_Graph, merge_treegraph: T_Graph, dem_file_path: str, dem_band):
    """Visualize test_legacy intermediate graphs"""
    lonlatalt_grid = dem_band.xy2lonlatalt(np.moveaxis(np.indices(dem_band.shape), 0, -1))
    visualize_plotly.node_vals_to_trace(plotly_fig, lonlatalt_grid, shape_dims=2)

    altitude_grid = dem_band.dem_buf
    # Will use plotly.graph_objects.Scattermap
    for name, graph_edges in {'merged': merge_treegraph, 'initial': tree_graph}.items():
        node_color = topo_graph.isolate_subgraphs(graph_edges, node_shape=altitude_grid.shape)
        visualize_plotly.graph_to_trace(plotly_fig, graph_edges, lonlatalt_grid,
                                        node_color=node_color, name=f'{name} {graph_edges.shape[2:]}')
    plotly_fig.update_layout(title_text=
            f'{os.path.basename(dem_file_path)} -'
            f' Tree edges: {tree_graph.shape[2:]} - {merge_treegraph.shape[2:]}'
            f' grid: {lonlatalt_grid.shape}',
            map=visualize_plotly.map_zoom_kwargs(lonlatalt_grid))
